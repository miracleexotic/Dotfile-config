- name: "nvim]-[Get zsh path."
  shell: which zsh
  args:
    executable: /bin/bash
  register: zsh
- name: "----"
  debug:
    msg: "Executable: {{ zsh.stdout }}"

- name: "nvim]-[Install require library"
  shell: pacman -S ripgrep fd
  args:
    executable: "{{ zsh.stdout }}"
  register: result

- name: "nvim]-[Verify ~/Downloads folder"
  stat:
    path: /home/{{ user }}/Downloads
  register: result
- name: "starship]-[Create ~/Downloads folder"
  become_user: "{{ user }}"
  file:
    path: /home/{{ user }}/Downloads
    state: directory
  when: not result.stat.exists
  register: result
- name: "----"
  debug:
    msg: "{% if result.changed == true %}Created ~/Downloads folder{% else %}Folder ~/Downloads is exists{% endif %}"

- name: "nvim::neo-vim]-[Download Neo Vim."
  become_user: "{{ user }}"
  shell: curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
  args:
    chdir: /home/{{ user }}/Downloads/
    executable: "{{ zsh.stdout }}"
  register: result
- name: "----"
  debug:
    msg: "{{ result.stdout_lines }}"

- name: "nvim::neo-vim]-[Change permission nvim.appimage can execute."
  become_user: "{{ user }}"
  shell: chmod u+x nvim.appimage
  args:
    chdir: /home/{{ user }}/Downloads/
    executable: "{{ zsh.stdout }}"
  register: result
- name: "----"
  debug:
    var: result

- name: "nvim::neo-vim]-[Run nvim.appimage"
  become_user: "{{ user }}"
  shell: ./nvim.appimage --appimage-extract
  args:
    chdir: /home/{{ user }}/Downloads/
    executable: "{{ zsh.stdout }}"
  register: result
- name: "----"
  debug:
    msg: "{{ result.stdout_lines }}"

- name: "nvim::neo-vim]-[Check Neo Vim version."
  become_user: "{{ user }}"
  shell: ./squashfs-root/AppRun --version
  args:
    chdir: /home/{{ user }}/Downloads/
    executable: "{{ zsh.stdout }}"
  register: result
- name: "----"
  debug:
    msg: "{{ result.stdout }}"

- name: "nvim::neo-vim]-[Exposing nvim globally."
  shell: mv squashfs-root / && sudo ln -sf /squashfs-root/AppRun /usr/bin/nvim
  args:
    chdir: /home/{{ user }}/Downloads/
    executable: "{{ zsh.stdout }}"
  register: result
- name: "----"
  debug:
    var: result

- name: "nvim::neo-vim]-[Link nvim folder"
  shell: ln -sf /home/{{ user }}/Dotfile-config/nvim/config/nvim /home/{{ user }}/.config/nvim
  args:
    chdir: /home/{{ user }}
  register: result

- name: "nvim::neo-vim]-[Remove download file."
  shell: rm -rf ./nvim.appimage
  args:
    chdir: /home/{{ user }}/Downloads/
    executable: "{{ zsh.stdout }}"
  register: result

- name: "nvim]-[Verify ~/Session.vim file"
  stat:
    path: /home/{{ user }}/Session.vim
  register: result
- name: "nvim]-[Create ~/Session.vim file"
  become_user: "{{ user }}"
  file:
    path: /home/{{ user }}/Session.vim
    state: touch
  when: not result.stat.exists
  register: result
- name: "----"
  debug:
    msg: "{% if result.changed == true %}Created ~/Session.vim folder{% else %}Folder ~/Session.vim is exists{% endif %}"

- include_tasks: ../Prog-lang/NodeJS/install.yaml
- include_tasks: ../Prog-lang/Python/miniconda/install.yaml
